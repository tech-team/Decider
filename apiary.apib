FORMAT: 1A

# Decider

In Soviet Russia decisions make you

## Group User

Resources related to user registration and login

## Login [/login]

### Login [POST]

Log in user using email (or social id) and password.

+ `email` (required, string) - User's email 
+ `password` (required, string) - User's password


+ Request (application/json)

        {
            "email": "aaa@aaa.aaa",
            "password": "pass"
        }
        
+ Response 200 (application/json)

        {
            "status": "ok",
            "msg": "Login successful",
            "code": 2000,
            "data": {
                "uid": "3e3d33ff3f3fd3f3f3f3d3",
                "access_token": "d7Fi4I2DtLXuLCNukHDITQdjqfFDfR",
                "expires": 36000,
                "refresh_token": "9Rz8AFAyMYJHjmYs8WXMGHQbBTvwOk"
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Some fields are not filled",
            "code": 7003,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Invalid credentials",
            "code": 7002
        }
        
+ Response 404 (application/json)

        {
            "status": "error",
            "msg": "Unknown social site",
            "code": 7005
        }
        
+ Response 500 (application/json)

        {
            "status": "error",
            "code": 7100,
            "msg": "Login failed"
        }

## Registration [/registration]

### Registration [POST]

Register user using email and password.

+ `email` (required, string) - User's email,
+ `password` (required, string) - User's password


+ Request (application/json)

        {
            "email": "aaa@aaa.aaa",
            "password": "pass"
        }
        
+ Response 201 (application/json)

        {
            "status": "ok",
            "msg": "Registration successful",
            "code": 2001,
            "data": {
                "access_token": "d7Fi4I2DtLXuLCNukHDITQdjqfFDfR",
                "expires": 36000,
                "refresh_token": "9Rz8AFAyMYJHjmYs8WXMGHQbBTvwOk"
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Some fields are not filled",
            "code": 7003,
            "errors": []
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Invalid credentials",
            "code": 7002
        }
        
+ Response 500 (application/json)

        {
            "status": "error",
            "code": 7101,
            "msg": "Registration failed"
        }


## User data [/user/{user_id}{?access_token}]

Returns user data (current user if user_id is not specified)

+ Parameters
    + user_id (optional, number, `1`) ... ID of User in form of an integer
    + access_token (required, string, `ACCESSTOKEN`) ... Access token

### View user's details [GET]

+ Request (application/json)

        {
            "access_token": "fewefwgwewgogjockp"
        }


+ Response 200 (application/json)

        {
            "status": "ok",
            "msg": "User fetched successfully",
            "code": 2000,
            "data": {
                "uid": "dwwdwdwdw",
                "first_name": "dedede",
                "and_all": "other_data"
            }
        }


+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Some fields are invalid",
            "code": 8100,
            "errors": ["user_id"]
        }


+ Response 404 (application/json)

        {
            "status": "error",
            "msg": "No user with specified id",
            "code": 8006
        }


+ Response 500 (application/json)

        {
            "status": "error",
            "msg": "Failed to fetch user",
            "code": 1000
        }
        

### Edit user [POST]

Multipart request with fields subject to updating. If registration is
unfinished, username is required.

+ `username` (optional, string, `usernaem`) ... Username (has to be unique)
+ `first_name` (optional, string, `fname`) ... First name
+ `last_name` (optional, string, `lname`) ... Last name
+ `birthday` (optional, string, `2011-09-02`) ... Birthday in "YYYY-MM-DD" format
+ `country` (optional, string, `яussia`) ... Country
+ `city` (optional, string, `moskva`) ... City
+ `about` (optional, string, `hodor`) ... Short info about user
+ `gender` (optional, string, `F`) ... Gender ('F', 'M' or 'N')

+ Request (multipart/form-data)
        
+ Response 201 (application/json)

        {
            "status": "ok",
            "msg": "User successfully updated",
            "code": 2001,
            "data": {
                "username": "vasya",
                "last_name": "BBB",
                "uid": "b27ae426b7eb42b89f6a8a51fa2a7c0f",
                "social_id": "22",
                "is_active": true,
                "first_name": "DDD",
                "birthday": null,
                "date_joined": "2015-04-09T12:58:20Z",
                "city": "",
                "about": "",
                "middle_name": "",
                "is_anonymous": false,
                "country": null,
                "last_login": "2015-07-18T18:14:12Z",
                "avatar": null,
                "gender": false,
                "social_site": "vk"
            }
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Username is required to finish registration",
            "code": 7003,
            "errors": []
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Username taken",
            "code": 7006,
            "errors": []
        }
        
## Refresh token [/refresh_token]

### Refresh token [POST]

Refresh token data

+ `refresh_token` (required, string) - refresh_token

+ Request (application/json)

        {
            "refresh_token": "fewefwgwewgogjockp"
        }
        
+ Response 201 (application/json)

        {
            "status": "ok",
            "msg": "Here is your fresh token",
            "code": 2001,
            "data": {
                "access_token": "d7Fi4I2DtLXuLCNukHDITQdjqfFDfR",
                "expires": 36000,
                "refresh_token": "9Rz8AFAyMYJHjmYs8WXMGHQbBTvwOk"
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Required params are missing",
            "code": 8000,
            "errors": ["refresh_token"]
        }


+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Invalid refresh token",
            "code": 7001
        }       
        
        
## Group Image

Resources related to image upload

## Images [/images]

### Images [POST]

Upload an image

+ `access_token` (required, string, `ACCESSTOKEN`) - Access token,
+ `image` (required, image) - source image
+ `preview` (required, image) - preview image

+ Request (multipart/form-data)

        --Asrf456BGe4h
        Content-Disposition: form-data; name="access_token"
        
        ACCESSTOKEN
        --Asrf456BGe4h
        Content-Disposition: form-data; name="image"; filename="img.jpg"
        Content-Type: image/jpeg
        
        binary img file
        --Asrf456BGe4h
        Content-Disposition: form-data; name="preview"; filename="img_prev.jpg"
        Content-Type: image/jpeg
        
        binary img file

+ Response 201 (application/json)

        {
            "status": "ok",
            "msg": "Images uploaded",
            "code": 2001,
            "data": {
                "uid": "dd44d4d4d4d4d44"
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Required params missing",
            "code": 8000,
            "errors": []
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Bad image",
            "code": 4000
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Bad preview",
            "code": 4000
        }
        
+ Response 403 (application/json)

+ Response 500 (application/json)

        {
            "status": "error",
            "msg": "Image upload failed",
            "code": 4100
        }


## Group Category

Resources related to categories and locales

## Categories [/categories{?locale}{?access_token}]

+ Parameters
    + locale (required, string, `ru_RU`) ... Client's locale
    + access_token (required, string, `ACCESSTOKEN`) ... Access token

### List All Categories [GET]

+ Response 200 (application/json)

        {
            "status": "ok",
            "code": 2000,
            "msg": "DUNNO",
            "total": 4,
            "locale": "ru_RU",
            "data": [
                {
                    "id": 1,
                    "name": "Одежда"
                },
                {
                    "id": 2,
                    "name": "Музыка"
                },
                {
                    "id": 3,
                    "name": "Жизнь"
                },
                {
                    "id": 4,
                    "name": "Работа"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some parameters are invalid",
            "errors": [ ]
        }        
        
+ Response 403 (application/json)


## Group Question

Resources related to questions in the API.

## Question [/questions/{question_id}{?access_token}]

+ Parameters
    + question_id (required, number, `1`) ... ID of the Question in form of an integer
    + access_token (required, string, `ACCESSTOKEN`) ... Access token

### View a Question's Detail [GET]

+ Response 200 (application/json)

        {
            "status": "ok",
            "code": 2000,
            "msg": "Successfully fetched question",
            "data": {
                "id": 1,
                "text": "Какое платье приодеть?",
                "creation_date": "2014-11-11T08:40:51.620Z",
                "category_id": 3,
                "author": {
                    "id": 12,
                    "uid": "3e3d33ff3f3fd3f3f3f3d3",
                    "username": "whotheforkami",
                    "last_name": "Добрев",
                    "first_name": "Нина",
                    "middle_name": "Кжижтовна",
                    "avatar": "http://vignette3.wikia.nocookie.net/prettylittleliars/images/9/99/Nina_dobrev.jpg/revision/latest?cb=20131005203615"
                },
                "poll": [
                    {
                        "id": 124,
                        "text": "Белое",
                        "image_url": "http://cs301806.vk.me/v301806039/3fe0/Ps1ZDUixseo.jpg",
                        "preview_url": "url/././././.jpg",
                        "votes_count": 23
                    },
                    {
                        "id": 125,
                        "text": "Красное",
                        "image_url": "http://public.starlook.ru/temp/article/lookobzor/27/1/63rdAnnualPrimetimeEmmyAwardsArrivalsR-7OeiQnDDxl.jpg",
                        "preview_url": "url/././././.jpg",
                        "votes_count": 73
                    }
                ],
                "likes_count": 42,
                "comments": [
                    {
                        "id": 12,
                        "text": "Конечно же красное, какие тут вопросы могут быть?",
                        "creation_date": "2014-11-11T08:40:51.620Z",
                        "author": {
                            "uid": "3e3d33ff3f3fd3f3f3f3d3",
                            "username": "snake",
                            "first_name": "",
                            "last_name": "",
                            "middle_name": "",
                            "avatar": null,
                            "id": 4
                        },
                        "likes_count": 9
                    },
                    {
                        "id": 15,
                        "text": "Считаю, что белое. Вот так.",
                        "creation_date": "2014-11-11T08:40:51.620Z",
                        "author": {
                            "uid": "3e3d33ff3f3fd3f3f3f3d3",
                            "username": "snake",
                            "first_name": "",
                            "last_name": "",
                            "middle_name": "",
                            "avatar": null,
                            "id": 4
                        },
                        "likes_count": 3
                    }
                ]
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some fields are invalid",
            "errors": []
        }
        
+ Response 403 (application/json)
        
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8001,
            "msg": "Question with specified id was not found"
        }
        
+ Response 500 (application/json)

        {
            "status": "error",
            "code": 1000,
            "msg": "Failed to get question details"
        }


## Poll [/poll]

### Vote on a questions's poll [POST]

This action allows you to vote on a question's poll. Current example:
{
    "access_token":"ACCESSTOKEN",
    "question_id": 1,
    "poll_item_id":12
}

+ `access_token` (required, string) ... Access token
+ `question_id` (required, number) ... Question id
+ `poll_item_id` (required, number) ... Poll item id


+ Request (application/x-www-form-urlencoded)

        access_token=ACCESSTOKEN&question_id=1&poll_item_id=12


+ Response 201 (application/json)

        {
            "status": "ok",
            "code": 2001,
            "msg": "Voted successfully",
            "data": [
            {
                "poll_item_id": 11,
                "votes_count": 228
            },
            {
                "poll_item_id": 12,
                "votes_count": 248
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8000,
            "msg": "Required params are missing",
            "errors": [ ]
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some fields are invalid",
            "errors": [ ]
        }
    
+ Response 400 (application/json)
      
        {
            "status": "error",
            "code": 8200,
            "msg": "Already voted for that poll",
        }

+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8001,
            "msg": "Question with specified id was not found"
        }
  
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8005,
            "msg": "Poll was not found"
        }
        
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8002,
            "msg": "Poll item with specified id was not found"
        }

+ Response 500 (application/json)

        {
            "status": "error",
            "code": 1000,
            "msg": "Failed to vote"
        }

## Question's collection [/questions{?tab}{?limit}{?offset}{?categories%5b%5d}{?access_token}]

+ Parameters
    + tab (optional, string, `new`) ... Question tab [new, popular, my]
    + limit (optional, number, `1`) ... Maximum number of questions to return
    + offset (optional, number, `1`) ... Questions offset
    + categories%5b%5d (optional, number, `5`) ... Selected categories
        For example: `categories[]=1&categories[]=2&categories[]=3`
    + access_token (required, string, `ACCESSTOKEN`) ... Access token

### List All Questions [GET]

+ Response 200 (application/json)

        {
            "status": "ok",
            "code": 2000,
            "msg": "Successfully fetched questions",
            "total": 8301,
            "data": [
                {
                    "id": 1,
                    "text": "Какое платье приодеть?",
                    "creation_date": "2014-11-11T08:40:51.620Z",
                    "category_id": 3,
                    "author": {
                        "id": 12,
                        "uid": "3e3d33ff3f3fd3f3f3f3d3",
                        "username": "whotheforkami",
                        "last_name": "Добрев",
                        "first_name": "Нина",
                        "middle_name": "Кжижтовна",
                        "avatar": "http://vignette3.wikia.nocookie.net/prettylittleliars/images/9/99/Nina_dobrev.jpg/revision/latest?cb=20131005203615"
                    },
                    "poll": [
                        {
                            "id": 124,
                            "text": "Белое",
                            "image_url": "http://cs301806.vk.me/v301806039/3fe0/Ps1ZDUixseo.jpg",
                            "preview_url": "url/././././.jpg",
                            "votes_count": 23,
                            "voted": true       
                        },
                        {
                            "id": 125,
                            "text": "Красное",
                            "image_url": "http://public.starlook.ru/temp/article/lookobzor/27/1/63rdAnnualPrimetimeEmmyAwardsArrivalsR-7OeiQnDDxl.jpg",
                            "preview_url": "url/././././.jpg",
                            "votes_count": 73,
                            "voted": false
                        }
                    ],
                    "likes_count": 42,
                    "comments_count": 2,
                    "is_anonymous": true,
                    "voted": true
                },
                {
                    "id": 2,
                    "text": "Какое платье приодеть на этот раз?",
                    "creation_date": "2014-11-11T08:40:51.620Z",
                    "category_id": 3,
                    "author": {
                        "id": 12,
                        "uid": "3e3d33ff3f3fd3f3f3f3d3",
                        "username": "whotheforkami",
                        "last_name": "Добрев",
                        "first_name": "Нина",
                        "middle_name": "Кжижтовна",
                        "avatar": "http://vignette3.wikia.nocookie.net/prettylittleliars/images/9/99/Nina_dobrev.jpg/revision/latest?cb=20131005203615"
                    },
                    "poll": [
                        {
                            "id": 126,
                            "text": "Белое",
                            "image_url": "http://cs301806.vk.me/v301806039/3fe0/Ps1ZDUixseo.jpg",
                            "preview_url": "url/././././.jpg",
                            "votes_count": 23,
                            "voted": false
                        },
                        {
                            "id": 127,
                            "text": "Красное",
                            "image_url": "http://public.starlook.ru/temp/article/lookobzor/27/1/63rdAnnualPrimetimeEmmyAwardsArrivalsR-7OeiQnDDxl.jpg",
                            "preview_url": "url/././././.jpg",
                            "votes_count": 73,
                            "voted": false
                        }
                    ],
                    "voted": false,
                    "likes_count": 54,
                    "comments_count": 10,
                    "is_anonymous": true
                }
            ]
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some parameters are invalid",
            "errors": [ ]
        }        
    
+ Response 403 (application/json)
        
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8003,
            "msg": "Tab is unknown"
        }
        
+ Response 500 (application/json)

        {
            "status": "error",
            "code": 1000,
            "msg": "Failed to fetch questions"
        }
        
        
## New Question [/questions]

### Create a New Question [POST]

You may create your own question using this action. It takes a multipart form
containing a question and a collection of answers in the
form of choices. For every item in range from 1 to items_count
`image`, `preview` and `text` fields are required.

+ `access_token` (required, string, `ACCESSTOKEN`) ... Access token
+ `text` (required, string, `texttxtxt`) ... Question's text
+ `category_id` (required, number, 21) - Category id
+ `items_count` (optional, number, 2) - Items count
+ `poll_x_text` (required, string, `polltxt`) - poll (number x) text
+ `poll_x_image` (required, file) - poll (number x) image
+ `poll_x_preview` (required, file) - poll (number x) preview image

+ Request (multipart/form-data)

+ Response 201 (application/json)

        {
            "status": "ok",
            "code": 2001,
            "msg": "Question added",
            "data": {
                "id": 1,
                "text": "Какое платье приодеть?",
                "creation_date": "2014-11-11T08:40:51.620Z",
                "category_id": 3,
                "is_anonymous": false,
                "author": {
                    "id": 12,
                    "uid": "3e3d33ff3f3fd3f3f3f3d3",
                    "username": "whotheforkami",
                    "last_name": "Добрев",
                    "first_name": "Нина",
                    "middle_name": "Кжижтовна",
                    "avatar": "http://vignette3.wikia.nocookie.net/prettylittleliars/images/9/99/Nina_dobrev.jpg/revision/latest?cb=20131005203615"
                },
                "poll": [
                    {
                        "id": 124,
                        "text": "Белое",
                        "image_url": "url/././././",
                        "preview_url": "url/././././",
                        "votes_count": 0,
                    },
                    {
                        "id": 125,
                        "text": "Красное",
                        "image_url": "url/././././",
                        "preview_url": "url/././././",
                        "votes_count": 0,
                    }
                ],
                "likes_count": 0,
                "comments": [ ]
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8000,
            "msg": "Required params are missing",
            "errors": [ ]
        }
        
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some fields are invalid",
            "errors": [ ]
        }
        
        
+ Response 403 (application/json)
        
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8004,
            "msg": "Category is unknown"
        }

+ Response 500 (application/json)

        {
            "status": "error",
            "code": 1000,
            "msg": "Failed to create question"
        }
        
## Comment [/comments]

### Comment on a Question [POST]

You can comment on a question using this action. It takes a JSON
object containing a comment and information about the commented question.

+ `access_token` (string) - Access token
+ `text` (string) - Comment text
+ `question_id` (number) - Question id
+ `is_anonymous` (boolean) - Nuff said,
+ `last_seen_id` (number) - id of last seen comment

+ Request (application/json)

        {
            "access_token": "ACCESSTOKEN",
            "data": {
                "text": "Imma commentin",
                "question_id": 3,
                "is_anonymous": false
            }
        }

+ Response 201 (application/json)

        {
            "status": "ok",
            "code": 2001,
            "msg": "Comment added",
            "data": [{
                "id": 10,
                "text": "Imma commentin",
                "creation_date": "2014-11-11T08:40:51.620Z",
                "question_id": 3,
                "is_anonymous": false,
                "author": {
                    "id": 12,
                    "uid": "3e3d33ff3f3fd3f3f3f3d3",
                    "username": "whotheforkami",
                    "last_name": "Добрев",
                    "first_name": "Нина",
                    "middle_name": "Кжижтовна",
                    "avatar": "http://vignette3.wikia.nocookie.net/prettylittleliars/images/9/99/Nina_dobrev.jpg/revision/latest?cb=20131005203615"
                },
            }]
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8000,
            "msg": "Required params are missing",
            "errors": [ ]
        }
        
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some fields are invalid",
            "errors": [ ]
        }
        
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8001,
            "msg": "Question is unknown"
        }
        
+ Response 500 (application/json)

        {
            "status": "error",
            "code": 1000,
            "msg": "Failed to comment"
        }


## Group Comments

## Comments collection [/comments{?question_id}{?limit}{?offset}{?order}{?access_token}]

+ Parameters
    + question_id (required, number, `1`) ... Question id
    + limit (optional, number, `1`) ... Maximum number of comments to return
    + offset (optional, number, `1`) ... Comments offset
    + order (optional, string, `-creation_date`) ... Order by field, prepend '-' for descending
    + access_token (required, string, `ACCESSTOKEN`) ... Access token

### List All Comments on a question [GET]

+ Response 200 (application/json)

        {
            "status": "ok",
            "msg": "Successfully fetched comments",
            "code": 2000,
            "data": {
                "remaining": 5,
                "comments": [
                    {
                        "author": {
                            "username": "admin",
                            "first_name": "",
                            "last_name": "",
                            "middle_name": "",
                            "uid": "b27ae426b7eb42b89f6a8a51fa2a7c0f",
                            "avatar": null
                        },
                        "text": "see",
                        "creation_date": "2015-04-17T15:11:59.671Z",
                        "voted": false,
                        "id": 34,
                        "likes_count": 0
                    },
                    {
                        "author": {
                            "username": "admin",
                            "first_name": "",
                            "last_name": "",
                            "middle_name": "",
                            "uid": "b27ae426b7eb42b89f6a8a51fa2a7c0f",
                            "avatar": null
                        },
                        "text": "see",
                        "creation_date": "2015-04-17T15:11:59.671Z",
                        "voted": false,
                        "id": 35,
                        "likes_count": 0
                    }
                ]
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "code": 8100,
            "msg": "Some parameters are invalid",
            "errors": [ ]
        }        
        
+ Response 403 (application/json)
        
        
## Group Vote

Resources related to votes (likes) for comments and questions

## Vote [/vote]

### Vote [POST]

Vote on a comment or question.

+ `entity` (required, string, ['question', 'comment']) - Entity name 
+ `entity_id` (required, string) - Entity id 
+ `access_token` (required, string) - Access token


+ Request (application/json)

        {
            "access_token": "fef232if2nf2nfi2n",
            "entity": "question",
            "entity_id": 23
        }
        
+ Response 201 (application/json)

        {
            "status": "ok",
            "msg": "Vote successful",
            "code": 2001,
            "data": {
                "entity_id": 23,
                "likes_count": 232
            }
        }

+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Registration unfinished",
            "code": 3000,
            "errors": []
        }
        
+ Response 400 (application/json)

        {
        "status": "error",
        "msg": "Required params are missing",
        "code": 8000,
        "errors": []
        }
        
+ Response 400 (application/json)

        {
            "status": "error",
            "msg": "Invalid entity",
            "code": 8101
        }
        
+ Response 404 (application/json)

        {
            "status": "error",
            "code": 8010,
            "msg": "Unknown entity"
        }
